#include <stdio.h>
#include <stdlib.h>

/** The size of the name field */
#define CUSTOMERRECORD_NAME_SIZE 70UL
/** The size of the address field */
#define CUSTOMERRECORD_ADDRESS_SIZE 130UL
/** The size of the portalCode field */
#define CUSTOMERRECORD_POSTALCODE_SIZE 20UL
/** The size of the town field */
#define CUSTOMERRECORD_TOWN_SIZE 90UL

/** The size in bytes of all the packed fields of a CustomerRecord */
#define CUSTOMERRECORD_SIZE (    CUSTOMERRECORD_NAME_SIZE + \
                                 CUSTOMERRECORD_ADDRESS_SIZE + \
                                 CUSTOMERRECORD_POSTALCODE_SIZE + \
                                 CUSTOMERRECORD_TOWN_SIZE)

/** A customer record */
typedef struct {
    /** The name */
    char name[CUSTOMERRECORD_NAME_SIZE];
    /** The address */
    char address[CUSTOMERRECORD_ADDRESS_SIZE];
    /** The postal code */
    char postalCode[CUSTOMERRECORD_POSTALCODE_SIZE];
    /** The Town */
    char town[CUSTOMERRECORD_TOWN_SIZE];
} CustomerRecord;

/** The structure which represents an opened customer database */
typedef struct {
    FILE * file; /**< The FILE pointer for the associated file */
    int recordCount; /**< The number of record in the database */
} CustomerDB;

void CustomerRecord_setValue_name(CustomerRecord * record, const char * value);
void CustomerRecord_setValue_address(CustomerRecord * record, const char * value);
void CustomerRecord_setValue_postalCode(CustomerRecord * record, const char * value);
void CustomerRecord_setValue_town(CustomerRecord * record, const char * value);

char * CustomerRecord_getValue_name(CustomerRecord * record);
char * CustomerRecord_getValue_address(CustomerRecord * record);
char * CustomerRecord_getValue_postalCode(CustomerRecord * record);
char * CustomerRecord_getValue_town(CustomerRecord * record);

void CustomerRecord_init(CustomerRecord * record);
void CustomerRecord_finalize(CustomerRecord * record);

void CustomerRecord_read(CustomerRecord * record, FILE * file);
void CustomerRecord_write(CustomerRecord * record, FILE * file);

CustomerDB * CustomerDB_create(const char * filename);
CustomerDB * CustomerDB_open(const char * filename);
CustomerDB * CustomerDB_openOrCreate(const char * filename);
void CustomerDB_close(CustomerDB * customerDB);
int CustomerDB_getRecordCount(CustomerDB * customerDB);
void CustomerDB_readRecord( CustomerDB * customerDB, int recordIndex, CustomerRecord *record);
void CustomerDB_writeRecord(CustomerDB * customerDB, int recordIndex, CustomerRecord *record);

int main()
{
    CustomerRecord* cr;
    CustomerRecord* crFromFile;
    cr = (CustomerRecord*) malloc(sizeof(CustomerRecord));
    CustomerRecord_init(cr);
    CustomerRecord_init(crFromFile);
    crFromFile = (CustomerRecord*) malloc(sizeof(CustomerRecord));

    CustomerDB * cd;
    cd = CustomerDB_openOrCreate("db.txt");

    CustomerRecord_setValue_name(cr, "olivier");
    CustomerRecord_setValue_address(cr, "24 rue des fours");
    CustomerRecord_setValue_postalCode(cr, "79190");
    CustomerRecord_setValue_town(cr, "clussais la pommeraie");

    CustomerDB_writeRecord(cd, 0, cr);

    printf("name: %s\n", CustomerRecord_getValue_name(cr));
    printf("address: %s\n", CustomerRecord_getValue_address(cr));
    printf("postalCode: %s\n", CustomerRecord_getValue_postalCode(cr));
    printf("town: %s\n\n", CustomerRecord_getValue_town(cr));

    FILE * fp;
    fp = fopen("test.txt", "ab+");
    CustomerRecord_write(cr, fp);
    fclose(fp);
    fp = fopen("test.txt", "rb");
    CustomerRecord_read(crFromFile, fp);
    fclose(fp);

    printf("fp name: %s\n", CustomerRecord_getValue_name(crFromFile));
    printf("fp address: %s\n", CustomerRecord_getValue_address(crFromFile));
    printf("fp postalCode: %s\n", CustomerRecord_getValue_postalCode(crFromFile));
    printf("fp town: %s\n", CustomerRecord_getValue_town(crFromFile));

    return 0;
}

size_t stringLength(const char * str){
    int i=0;
    while(*str!='\0'){
        str++;
        i++;
    }
    return (size_t)i;
}

void copyStringWithLength(char * dest, const char * src, size_t destSize){
    int i;
    for(i=0; i<(int)destSize-1; i++){
        dest[i] = src[i];
    }
    dest[i] = '\0';
}

char * duplicateString(const char * str){
    char * dest;

    dest = (char *)malloc((stringLength(str)+1)*sizeof(char));
    if(dest == NULL)
        exit(-1);

    copyStringWithLength(dest, str, (size_t)stringLength(str)+1);
    return dest;
}

void CustomerRecord_setValue_name(CustomerRecord * record, const char * value){
    copyStringWithLength(record->name, value, CUSTOMERRECORD_NAME_SIZE);
}

void CustomerRecord_setValue_address(CustomerRecord * record, const char * value){
    copyStringWithLength(record->address, value, CUSTOMERRECORD_ADDRESS_SIZE);
}

void CustomerRecord_setValue_postalCode(CustomerRecord * record, const char * value){
    copyStringWithLength(record->postalCode, value, CUSTOMERRECORD_POSTALCODE_SIZE);
}

void CustomerRecord_setValue_town(CustomerRecord * record, const char * value){
    copyStringWithLength(record->town, value, CUSTOMERRECORD_TOWN_SIZE);
}

char * CustomerRecord_getValue_name(CustomerRecord * record){
    return duplicateString(record->name);
}

char * CustomerRecord_getValue_address(CustomerRecord * record){
    return duplicateString(record->address);
}

char * CustomerRecord_getValue_postalCode(CustomerRecord * record){
    return duplicateString(record->postalCode);
}

char * CustomerRecord_getValue_town(CustomerRecord * record){
    return duplicateString(record->town);
}

void CustomerRecord_init(CustomerRecord * record){

}

void CustomerRecord_finalize(CustomerRecord * record){
    free(record);
}

void CustomerRecord_read(CustomerRecord * record, FILE * file){
    fread(record->name, sizeof(char), CUSTOMERRECORD_NAME_SIZE, file);
    fread(record->address, sizeof(char), CUSTOMERRECORD_ADDRESS_SIZE, file);
    fread(record->postalCode, sizeof(char), CUSTOMERRECORD_POSTALCODE_SIZE, file);
    fread(record->town, sizeof(char), CUSTOMERRECORD_TOWN_SIZE, file);
}

void CustomerRecord_write(CustomerRecord * record, FILE * file){
    fwrite(record->name, sizeof(char), CUSTOMERRECORD_NAME_SIZE, file);
    fwrite(record->address, sizeof(char), CUSTOMERRECORD_ADDRESS_SIZE, file);
    fwrite(record->postalCode, sizeof(char), CUSTOMERRECORD_POSTALCODE_SIZE, file);
    fwrite(record->town, sizeof(char), CUSTOMERRECORD_TOWN_SIZE, file);
}

CustomerDB * CustomerDB_create(const char * filename){
    CustomerDB *newCustomerDB;

    newCustomerDB = (CustomerDB*) malloc(sizeof(CustomerDB));
    if(newCustomerDB==NULL)
        exit(-1);

    newCustomerDB->file = fopen(filename, "wb+");
    if(newCustomerDB->file==NULL){
        free(newCustomerDB);
        return NULL;
    }

    newCustomerDB->recordCount=0;
    if(fwrite(&newCustomerDB->recordCount, sizeof(int), 1 ,newCustomerDB->file)==1){
        return newCustomerDB;
    }else{
        fclose(newCustomerDB->file);
        free(newCustomerDB);
        exit(-1);
    }
}

CustomerDB * CustomerDB_open(const char * filename){
    CustomerDB *openedCustomerDB;

    openedCustomerDB = (CustomerDB*) malloc(sizeof(CustomerDB));
    if(openedCustomerDB==NULL)
        exit(-1);

    openedCustomerDB->file = fopen(filename, "rb+");
    if(openedCustomerDB->file==NULL){
        free(openedCustomerDB);
        return NULL;
    }

    if(fread(&openedCustomerDB->recordCount, sizeof(int), 1, openedCustomerDB->file) == 1){
        return openedCustomerDB;
    }else{
        free(openedCustomerDB);
        exit(-1);
    }
}

CustomerDB * CustomerDB_openOrCreate(const char * filename){
    CustomerDB *customerDB;
    customerDB = CustomerDB_open(filename);
    if(customerDB==NULL){
        customerDB = CustomerDB_create(filename);
    }
    return customerDB;
}

void CustomerDB_close(CustomerDB * customerDB){
     fseek(customerDB->file, 0, SEEK_SET );
     fwrite(&customerDB->recordCount, sizeof(int), 1,customerDB->file);
     fclose(customerDB->file);
}

int CustomerDB_getRecordCount(CustomerDB * customerDB){
    return customerDB->recordCount;
}

void CustomerDB_readRecord( CustomerDB * customerDB, int recordIndex, CustomerRecord *record){
    if(recordIndex > customerDB->recordCount || recordIndex<0){
        printf("Index out of bound");
        exit(-1);
    }
    fseek(customerDB->file, (long)(sizeof(int))+(recordIndex*(long)(sizeof(CustomerRecord))), SEEK_SET);
    CustomerRecord_read(record, customerDB->file);
}

void CustomerDB_writeRecord(CustomerDB * customerDB, int recordIndex, CustomerRecord *record){
    if(recordIndex > customerDB->recordCount || recordIndex<0){
        printf("Index out of bound");
        exit(-1);
    }
    fseek(customerDB->file, (long)(sizeof(int))+(recordIndex*(long)(sizeof(CustomerRecord))), SEEK_SET);
    CustomerRecord_write(record, customerDB->file);
    if(recordIndex == customerDB->recordCount){
        customerDB->recordCount++;
    }
}
